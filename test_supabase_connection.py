#!/usr/bin/env python3
"""
Script para probar la conexi√≥n a Supabase
"""
import os
import sys
from sqlalchemy import create_engine, text
from sqlalchemy.exc import SQLAlchemyError

def test_supabase_connection():
    """Test connection to Supabase database"""
    
    # Tu URL de Supabase
    database_url = "postgresql://postgres:DiegoPortaz1994@db.vibodlvywbxfthxejshd.supabase.co:5432/postgres"
    
    print("üîç Probando conexi√≥n a Supabase...")
    print(f"URL: {database_url.replace('DiegoPortaz1994', '***PASSWORD***')}")
    
    try:
        # Crear engine con configuraci√≥n similar a tu app
        engine = create_engine(
            database_url,
            pool_recycle=300,
            pool_pre_ping=True,
            echo=True  # Para ver las queries SQL
        )
        
        # Probar conexi√≥n b√°sica
        print("\n‚úÖ Probando conexi√≥n b√°sica...")
        with engine.connect() as connection:
            result = connection.execute(text("SELECT version();"))
            version = result.fetchone()[0]
            print(f"‚úÖ Conexi√≥n exitosa! PostgreSQL version: {version}")
            
            # Probar permisos b√°sicos
            print("\n‚úÖ Probando permisos de base de datos...")
            
            # Listar tablas existentes
            result = connection.execute(text("""
                SELECT table_name 
                FROM information_schema.tables 
                WHERE table_schema = 'public'
                ORDER BY table_name;
            """))
            tables = result.fetchall()
            
            if tables:
                print(f"üìã Tablas existentes ({len(tables)}):")
                for table in tables:
                    print(f"  - {table[0]}")
            else:
                print("üìã No hay tablas en el esquema 'public'")
            
            # Probar creaci√≥n de tabla temporal
            print("\n‚úÖ Probando permisos de escritura...")
            connection.execute(text("""
                CREATE TABLE IF NOT EXISTS test_connection (
                    id SERIAL PRIMARY KEY,
                    test_message TEXT,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                );
            """))
            
            # Insertar datos de prueba
            connection.execute(text("""
                INSERT INTO test_connection (test_message) 
                VALUES ('Conexi√≥n de prueba exitosa');
            """))
            
            # Leer datos de prueba
            result = connection.execute(text("SELECT * FROM test_connection LIMIT 1;"))
            test_data = result.fetchone()
            print(f"‚úÖ Escritura/Lectura exitosa: {test_data}")
            
            # Limpiar tabla de prueba
            connection.execute(text("DROP TABLE test_connection;"))
            
            connection.commit()
            print("‚úÖ Todas las pruebas pasaron correctamente!")
            
    except SQLAlchemyError as e:
        print(f"‚ùå Error de SQLAlchemy: {str(e)}")
        return False
    except Exception as e:
        print(f"‚ùå Error general: {str(e)}")
        return False
    
    return True

def test_with_environment_variable():
    """Test using environment variable like the app does"""
    print("\n" + "="*50)
    print("üîç Probando con variable de entorno...")
    
    # Simular como lo hace tu app
    os.environ["DATABASE_URL"] = "postgresql://postgres:DiegoPortaz1994@db.vibodlvywbxfthxejshd.supabase.co:5432/postgres"
    
    database_url = os.environ.get("DATABASE_URL", "sqlite:///vehicle_marketplace.db")
    
    # Fix for Heroku PostgreSQL URL format (como en tu app)
    if database_url.startswith("postgres://"):
        database_url = database_url.replace("postgres://", "postgresql://", 1)
    
    print(f"URL procesada: {database_url.replace('DiegoPortaz1994', '***PASSWORD***')}")
    
    try:
        engine = create_engine(
            database_url,
            pool_recycle=300,
            pool_pre_ping=True
        )
        
        with engine.connect() as connection:
            result = connection.execute(text("SELECT 'Environment variable test successful' as message;"))
            message = result.fetchone()[0]
            print(f"‚úÖ {message}")
            
    except Exception as e:
        print(f"‚ùå Error con variable de entorno: {str(e)}")
        return False
    
    return True

if __name__ == "__main__":
    print("üöÄ Iniciando pruebas de conexi√≥n a Supabase")
    print("="*50)
    
    # Prueba 1: Conexi√≥n directa
    success1 = test_supabase_connection()
    
    # Prueba 2: Con variable de entorno
    success2 = test_with_environment_variable()
    
    print("\n" + "="*50)
    print("üìä RESUMEN DE PRUEBAS:")
    print(f"  Conexi√≥n directa: {'‚úÖ EXITOSA' if success1 else '‚ùå FALL√ì'}")
    print(f"  Variable de entorno: {'‚úÖ EXITOSA' if success2 else '‚ùå FALL√ì'}")
    
    if success1 and success2:
        print("\nüéâ ¬°Tu configuraci√≥n de Supabase est√° correcta!")
        print("\nüí° PR√ìXIMOS PASOS:")
        print("1. Aseg√∫rate de que DATABASE_URL est√© configurada en tu plataforma de deployment")
        print("2. Ejecuta: python app.py init-db  (para inicializar las tablas)")
        print("3. Tu aplicaci√≥n deber√≠a funcionar correctamente")
    else:
        print("\nüîß POSIBLES SOLUCIONES:")
        print("1. Verifica que la contrase√±a sea correcta")
        print("2. Verifica que la URL de Supabase sea correcta")
        print("3. Verifica que tu proyecto de Supabase est√© activo")
        print("4. Revisa los logs de Supabase para m√°s detalles")
    
    print("\n" + "="*50)
